enum Key {
    Tab,
    LeftArrow,
    RightArrow,
    UpArrow,
    DownArrow,
    PageUp,
    PageDown,
    Home,
    End,
    Insert,
    Delete,
    Backspace,
    Space,
    Enter,
    Escape,
    LeftCtrl,
    LeftShift,
    LeftAlt,
    LeftSuper,
    RightCtrl,
    RightShift,
    RightAlt,
    RightSuper,
    Menu,
    Alpha0,
    Alpha1,
    Alpha2,
    Alpha3,
    Alpha4,
    Alpha5,
    Alpha6,
    Alpha7,
    Alpha8,
    Alpha9,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    Apostrophe,
    Comma,
    Minus,
    Period,
    Slash,
    Semicolon,
    Equal,
    LeftBracket,
    Backslash,
    RightBracket,
    GraveAccent,
    CapsLock,
    ScrollLock,
    NumLock,
    PrintScreen,
    Pause,
    Keypad0,
    Keypad1,
    Keypad2,
    Keypad3,
    Keypad4,
    Keypad5,
    Keypad6,
    Keypad7,
    Keypad8,
    Keypad9,
    KeypadDecimal,
    KeypadDivide,
    KeypadMultiply,
    KeypadSubtract,
    KeypadAdd,
    KeypadEnter,
    KeypadEqual,
    GamepadStart,
    GamepadBack,
    GamepadFaceLeft,
    GamepadFaceRight,
    GamepadFaceUp,
    GamepadFaceDown,
    GamepadDpadLeft,
    GamepadDpadRight,
    GamepadDpadUp,
    GamepadDpadDown,
    GamepadL1,
    GamepadR1,
    GamepadL2,
    GamepadR2,
    GamepadL3,
    GamepadR3,
    GamepadLStickLeft,
    GamepadLStickRight,
    GamepadLStickUp,
    GamepadLStickDown,
    GamepadRStickLeft,
    GamepadRStickRight,
    GamepadRStickUp,
    GamepadRStickDown,
    MouseLeft,
    MouseRight,
    MouseMiddle,
    MouseX1,
    MouseX2,
    MouseWheelX,
    MouseWheelY,
    ReservedForModCtrl,
    ReservedForModShift,
    ReservedForModAlt,
    ReservedForModSuper,
    ModCtrl,
    ModShift,
    ModAlt,
    ModSuper,
    ModShortcut,
}

enum MouseSource {
    /// Input is coming from an actual mouse.
    Mouse,         
    /// Input is coming from a touch screen 
    /// (no hovering prior to initial press, less precise initial press aiming, dual-axis wheeling possible).
    TouchScreen,       
    /// Input is coming from a pressure/magnetic pen (often used in conjunction with high-sampling rates).
    Pen,               
}

/// The application is responsibe for calling these functions to update the input state.
// This has to be done before fl_ctx_new_frame() is called.
struct Input {
    /// Queue a new key down/up event. 
    /// Key should be "translated" (as in, generally [Key::A] matches the key end-user would use to emit an 'A' character)
    [static] add_key(key: Key),

    /// Queue a new key down/up event for analog values (
    /// e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.
    [static] add_key_analog_event(key: Key, down: bool, value: f32),

    /// Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)
    [static] add_mouse_pos_event(x: f32, y: f32),

    /// Queue a mouse button change
    [static] add_mouse_button_event(button: i32, down: bool),

    /// Queue a mouse wheel update. 
    /// wheel_y<0: scroll down, wheel_y>0: scroll up, wheel_x<0: scroll right, wheel_x>0: scroll left.
    [static] add_mouse_wheel_event(x: f32, y: f32),

    /// Queue a mouse source change (Mouse/TouchScreen/Pen)
    [static] add_mouse_source_event(source: MouseSource),
        
    /// Queue a gain/loss of focus for the application (generally based on OS/platform focus of your window)
    [static] app_focus_event(focused: bool),

    /// Queue a new character input
    [static] add_char_event(c: int),
}

// vim: syntax=rust expandtab ts=4 sw=4

