///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by api_gen. DO NOT EDIT!
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#include "manual.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef enum FlKey {

    FlKey_Tab = 0,

    FlKey_LeftArrow = 1,

    FlKey_RightArrow = 2,

    FlKey_UpArrow = 3,

    FlKey_DownArrow = 4,

    FlKey_PageUp = 5,

    FlKey_PageDown = 6,

    FlKey_Home = 7,

    FlKey_End = 8,

    FlKey_Insert = 9,

    FlKey_Delete = 10,

    FlKey_Backspace = 11,

    FlKey_Space = 12,

    FlKey_Enter = 13,

    FlKey_Escape = 14,

    FlKey_LeftCtrl = 15,

    FlKey_LeftShift = 16,

    FlKey_LeftAlt = 17,

    FlKey_LeftSuper = 18,

    FlKey_RightCtrl = 19,

    FlKey_RightShift = 20,

    FlKey_RightAlt = 21,

    FlKey_RightSuper = 22,

    FlKey_Menu = 23,

    FlKey_A = 24,

    FlKey_B = 25,

    FlKey_C = 26,

    FlKey_D = 27,

    FlKey_E = 28,

    FlKey_F = 29,

    FlKey_G = 30,

    FlKey_H = 31,

    FlKey_I = 32,

    FlKey_J = 33,

    FlKey_K = 34,

    FlKey_L = 35,

    FlKey_M = 36,

    FlKey_N = 37,

    FlKey_O = 38,

    FlKey_P = 39,

    FlKey_Q = 40,

    FlKey_R = 41,

    FlKey_S = 42,

    FlKey_T = 43,

    FlKey_U = 44,

    FlKey_V = 45,

    FlKey_W = 46,

    FlKey_X = 47,

    FlKey_Y = 48,

    FlKey_Z = 49,

    FlKey_F1 = 50,

    FlKey_F2 = 51,

    FlKey_F3 = 52,

    FlKey_F4 = 53,

    FlKey_F5 = 54,

    FlKey_F6 = 55,

    FlKey_F7 = 56,

    FlKey_F8 = 57,

    FlKey_F9 = 58,

    FlKey_F10 = 59,

    FlKey_F11 = 60,

    FlKey_F12 = 61,

    FlKey_Apostrophe = 62,

    FlKey_Comma = 63,

    FlKey_Minus = 64,

    FlKey_Period = 65,

    FlKey_Slash = 66,

    FlKey_Semicolon = 67,

    FlKey_Equal = 68,

    FlKey_LeftBracket = 69,

    FlKey_Backslash = 70,

    FlKey_RightBracket = 71,

    FlKey_GraveAccent = 72,

    FlKey_CapsLock = 73,

    FlKey_ScrollLock = 74,

    FlKey_NumLock = 75,

    FlKey_PrintScreen = 76,

    FlKey_Pause = 77,

    FlKey_Keypad0 = 78,

    FlKey_Keypad1 = 79,

    FlKey_Keypad2 = 80,

    FlKey_Keypad3 = 81,

    FlKey_Keypad4 = 82,

    FlKey_Keypad5 = 83,

    FlKey_Keypad6 = 84,

    FlKey_Keypad7 = 85,

    FlKey_Keypad8 = 86,

    FlKey_Keypad9 = 87,

    FlKey_KeypadDecimal = 88,

    FlKey_KeypadDivide = 89,

    FlKey_KeypadMultiply = 90,

    FlKey_KeypadSubtract = 91,

    FlKey_KeypadAdd = 92,

    FlKey_KeypadEnter = 93,

    FlKey_KeypadEqual = 94,

    FlKey_GamepadStart = 95,

    FlKey_GamepadBack = 96,

    FlKey_GamepadFaceLeft = 97,

    FlKey_GamepadFaceRight = 98,

    FlKey_GamepadFaceUp = 99,

    FlKey_GamepadFaceDown = 100,

    FlKey_GamepadDpadLeft = 101,

    FlKey_GamepadDpadRight = 102,

    FlKey_GamepadDpadUp = 103,

    FlKey_GamepadDpadDown = 104,

    FlKey_GamepadL1 = 105,

    FlKey_GamepadR1 = 106,

    FlKey_GamepadL2 = 107,

    FlKey_GamepadR2 = 108,

    FlKey_GamepadL3 = 109,

    FlKey_GamepadR3 = 110,

    FlKey_GamepadLStickLeft = 111,

    FlKey_GamepadLStickRight = 112,

    FlKey_GamepadLStickUp = 113,

    FlKey_GamepadLStickDown = 114,

    FlKey_GamepadRStickLeft = 115,

    FlKey_GamepadRStickRight = 116,

    FlKey_GamepadRStickUp = 117,

    FlKey_GamepadRStickDown = 118,

    FlKey_MouseLeft = 119,

    FlKey_MouseRight = 120,

    FlKey_MouseMiddle = 121,

    FlKey_MouseX1 = 122,

    FlKey_MouseX2 = 123,

    FlKey_MouseWheelX = 124,

    FlKey_MouseWheelY = 125,

    FlKey_ModCtrl = 126,

    FlKey_ModShift = 127,

    FlKey_ModAlt = 128,

    FlKey_ModSuper = 129,

    FlKey_ModShortcut = 130,
} FlKey;

typedef enum FlMouseSource {
    // Input is coming from an actual mouse.
    FlMouseSource_Mouse = 0,
    // Input is coming from a touch screen // (no hovering prior to initial press, less precise initial press aiming,
    // dual-axis wheeling possible).
    FlMouseSource_TouchScreen = 1,
    // Input is coming from a pressure/magnetic pen (often used in conjunction with high-sampling rates).
    FlMouseSource_Pen = 2,
} FlMouseSource;

typedef struct FlInput {
} FlInput;

// Queue a new key down/up event.
// Key should be "translated" (as in, generally [Key::A] matches the key end-user would use to emit an 'A' character)
static void fl_input_add_key_event(FlKey key, bool down);

// Queue a new key down/up event for analog values (
// e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.
static void fl_input_add_key_analog_event(FlKey key, bool down, float value);

// Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)
static void fl_input_add_mouse_pos_event(float x, float y);

// Queue a mouse button change
static void fl_input_add_mouse_button_event(int button, bool down);

// Queue a mouse wheel update.
// wheel_y<0: scroll down, wheel_y>0: scroll up, wheel_x<0: scroll right, wheel_x>0: scroll left.
static void fl_input_add_mouse_wheel_event(float x, float y);

// Queue a mouse source change (Mouse/TouchScreen/Pen)
static void fl_input_add_mouse_source_event(FlMouseSource source);

// Queue a gain/loss of focus for the application (generally based on OS/platform focus of your window)
static void fl_input_add_focus_event(bool focused);

// Queue a new character input
static void fl_input_add_char_event(int c);

// This is a bit temporary and should be moved
static void fl_input_update_screen_size_time(float display_h, float display_w, float w, float h, float delta_time);

#include "input.inl"
#ifdef __cplusplus
}
#endif
