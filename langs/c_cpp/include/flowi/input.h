
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by api_gen. DO NOT EDIT!
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "manual.h"
#include <stdbool.h>
#include <stdint.h>
#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

// The application is responsibe for calling these functions to update the input
// state.
struct FlInput;

// Queue a new key down/up event.
// Key should be "translated" (as in, generally [Key::A] matches the key
// end-user would use to emit an 'A' character)
static void fl_input_add_key(FlKey key);

// Queue a new key down/up event for analog values (
// e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.
static void fl_input_add_key_analog_event(FlKey key, bool down, float value);

// Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse
// (e.g. app not focused and not hovered)
static void fl_input_add_mouse_pos_event(float x, float y);

// Queue a mouse button change
static void fl_input_add_mouse_button_event(int button, bool down);

// Queue a mouse wheel update.
// wheel_y<0: scroll down, wheel_y>0: scroll up, wheel_x<0: scroll right,
// wheel_x>0: scroll left.
static void fl_input_add_mouse_wheel_event(float x, float y);

// Queue a mouse source change (Mouse/TouchScreen/Pen)
static void fl_input_add_mouse_source_event(FlMouseSource source);

// Queue a gain/loss of focus for the application (generally based on
// OS/platform focus of your window)
static void fl_input_app_focus_event(bool focused);

// Queue a new character input
static void fl_input_add_char_event(Flint c);

#include "input.inl"

#ifdef __cplusplus
}
#endif
