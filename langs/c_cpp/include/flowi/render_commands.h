///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by api_gen. DO NOT EDIT!
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "manual.h"
#include <stdbool.h>
#include <stdint.h>
#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

// Texture format specificed when using [CreateTexture] command
typedef enum FlTextureFormat {
  // Single byte texture in linear format
  FlTextureFormat_R8Linear = 0,
  // 3 byte R,G,B format (sRGB)
  FlTextureFormat_Rgb8Srgb = 1,
  // 3 byte R,G,B format (LINEAR)
  FlTextureFormat_Rgb8Linear = 2,
  // 4 byte R,G,B,A format (sRGB)
  FlTextureFormat_Rgba8Srgb = 3,
  // 4 byte R,G,B,A format (LINEAR)
  FlTextureFormat_Rgba8Linear = 4,
  // 16-bit single format. This will mostly be used for temporary things such as
  // blurs that requires more// than one pass rendering. i16 or f16 will allow
  // better accuracy, but R8_LINEAR can be used in worst case// in case the
  // rendering backend doesn't support this format
  FlTextureFormat_I16OrF16Linear = 5,
} FlTextureFormat;

typedef struct FlRenderRect {
  int x0;
  int y0;
  int x1;
  int y1;
} FlRenderRect;

typedef struct FlVertPosUvColor {
  float x;
  float y;
  uint16_t u;
  uint16_t v;
  uint32_t color;
} FlVertPosUvColor;

typedef struct FlVertPosColor {
  float x;
  float y;
  uint32_t color;
} FlVertPosColor;

typedef struct FlTexturedTriangles {
  uint32_t offset;
  [
    FlVertPosUvColor * vertex_buffer, uint32_t vertex_buffer_size
  ][uint16_t * index_buffer, uint32_t index_buffer_size] uint32_t texture_id;
} FlTexturedTriangles;

typedef struct FlSolidTriangles {
  uint32_t offset;
  [
    FlVertPosColor * vertex_buffer, uint32_t vertex_buffer_size
  ][uint16_t * index_buffer, uint32_t index_buffer_size]
} FlSolidTriangles;

typedef struct FlCreateTexture {
  [ uint8_t * data, uint32_t data_size ] uint16_t id;
  uint16_t format;
  uint16_t width;
  uint16_t height;
} FlCreateTexture;

typedef struct FlUpdateTexture {
  [ uint8_t * data, uint32_t data_size ] FlRenderRect rect;
  uint16_t texture_id;
} FlUpdateTexture;

typedef struct FlScissorRect {
  FlRenderRect rect;
} FlScissorRect;

#ifdef __cplusplus
}
#endif
