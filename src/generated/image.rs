// This file is auto-generated by api_gen. DO NOT EDIT!

#[allow(unused_imports)]
use crate::manual::{get_last_error, Color, FlString, Result};

#[allow(unused_imports)]
use bitflags::bitflags;

#[repr(C)]
pub struct ImageFfiApi {
    pub(crate) data: *const core::ffi::c_void,
    pub(crate) create_from_file:
        unsafe extern "C" fn(data: *const core::ffi::c_void, filename: FlString) -> u64,
    pub(crate) create_from_file_block:
        unsafe extern "C" fn(data: *const core::ffi::c_void, filename: FlString) -> u64,
    pub(crate) get_info:
        unsafe extern "C" fn(data: *const core::ffi::c_void, image: u64) -> *const ImageInfo,
}

#[cfg(feature = "static")]
extern "C" {
    pub fn fl_image_create_from_file_impl(
        data: *const core::ffi::c_void,
        filename: FlString,
    ) -> u64;
    pub fn fl_image_create_from_file_block_impl(
        data: *const core::ffi::c_void,
        filename: FlString,
    ) -> u64;
    pub fn fl_image_get_info_impl(data: *const core::ffi::c_void, image: u64) -> *const ImageInfo;
}

#[no_mangle]
pub static mut g_flowi_image_api: *const ImageFfiApi = std::ptr::null_mut();

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub enum ImageFormat {
    /// 8-bit per channel Red, Green and Blue
    Rgb = 0,
    /// 8-bit per channel Red, Green, Blue and Alpha
    Rgba = 1,
    /// 8-bit per channel Blue, Green and Red
    Bgr = 2,
    /// 8-bit per channel Blue, Green and Red and Alpha
    Bgra = 3,
    /// 8-bit per channel Alpha only
    Alpha = 4,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub enum SvgFlags {
    /// Render the SVG image using RGBA format
    Rgba = 0,
    /// Render the SVG image using Alpha only
    Alpha = 1,
}

#[repr(C)]
#[derive(Debug)]
pub struct ImageInfo {
    /// Format of the image. See the ImageFormat enum
    pub image_format: u32,
    /// width of the image
    pub width: u32,
    /// height of the Image
    pub height: u32,
    /// Number of frames. This is 1 for static images and > 1 for animated images
    pub frame_count: u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Image {
    pub handle: u64,
}

impl Image {
    /// Load image from file. Supported formats are:
    /// JPEG baseline & progressive (12 bpc/arithmetic not supported, same as stock IJG lib)
    /// PNG 1/2/4/8/16-bit-per-channel
    /// Notice that this will return a async handle so the data may not be acceassable directly.
    pub fn create_from_file(filename: &str) -> Result<Image> {
        unsafe {
            let _api = &*g_flowi_image_api;
            #[cfg(feature = "static")]
            let ret_val = fl_image_create_from_file_impl(_api.data, FlString::new(filename));
            #[cfg(any(feature = "dynamic", feature = "plugin"))]
            let ret_val = (_api.create_from_file)(_api.data, FlString::new(filename));
            if ret_val == 0 {
                Err(get_last_error())
            } else {
                Ok(Image { handle: ret_val })
            }
        }
    }

    /// Load image from file. Supported formats are:
    /// JPEG baseline & progressive (12 bpc/arithmetic not supported, same as stock IJG lib)
    /// PNG 1/2/4/8/16-bit-per-channel
    /// This call will block until the loading has finished. It's recommended to use the async version instead.
    pub fn create_from_file_block(filename: &str) -> Result<Image> {
        unsafe {
            let _api = &*g_flowi_image_api;
            #[cfg(feature = "static")]
            let ret_val = fl_image_create_from_file_block_impl(_api.data, FlString::new(filename));
            #[cfg(any(feature = "dynamic", feature = "plugin"))]
            let ret_val = (_api.create_from_file_block)(_api.data, FlString::new(filename));
            if ret_val == 0 {
                Err(get_last_error())
            } else {
                Ok(Image { handle: ret_val })
            }
        }
    }

    /// Get data amout the image
    pub fn get_info<'a>(image: Image) -> Result<&'a ImageInfo> {
        unsafe {
            let _api = &*g_flowi_image_api;
            #[cfg(feature = "static")]
            let ret_val = fl_image_get_info_impl(_api.data, image.handle);
            #[cfg(any(feature = "dynamic", feature = "plugin"))]
            let ret_val = (_api.get_info)(_api.data, image.handle);
            if ret_val.is_null() {
                Err(get_last_error())
            } else {
                Ok(&*ret_val)
            }
        }
    }
}
